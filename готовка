import random

def introduction():
    print("Итак, добро пожаловать на кухню Гордона Рамси. У тебя есть шанс проявить себя на моей кухне. Вероятность того, что ты уйдешь отсюда, не опозорив кулинарное ремесло, ничтожна, но давай посмотрим, что ты можешь.")
    user_name = input("Для начала назовись: ")
    return user_name

def choose_dish():
    dishes = {
        "Омлет": "жарка",
        "Салат": "нарезка",
        "Суп": "варка"
    }
    print("\nДоступные блюда:")
    for dish in dishes:
        print(f"- {dish}")
    
    chosen_dish = ""
    while chosen_dish not in dishes:
        chosen_dish = input("Жалкое подобие какого блюда будешь готовить? ").strip()
    
    return chosen_dish, dishes[chosen_dish]

def cooking_process(dish, method, user_name):
    steps = {
        "Омлет": [
            ("Разбей яйца", {"Разбить в миску": 2, "Разбить в сковороду": -1, "Добавить соль сразу": 1}),
            ("Будешь взбивать яйца с молоком? Если да, то как?", {"Взбить вилкой": 2, "Взбить миксером": 1, "Не взбивать": -2}),
            ("Разогрей сковороду", {"Разогреть на среднем огне": 2, "Разогреть на сильном огне": -2, "Разогреть на медленном огне": -3}),
            ("Вылей смесь на сковороду", {"Распределить по сковороде": 2, "Быстро вылить на сковородку": -2, "Сначала добавить зелень, а потом аккуратно вылить": 1}),
            ("Что будешь делать, пока блюдо жарится?", {"Перемешивать регулярно": 2, "Периодически потрясывать сковородку": -2, "Потихоньку снижать огонь": -3})
        ],
        "Салат": [
            ("Помой овощи", {"Помыть в специальном контейнере": 2, "Помыть под проточной водой": 0, "Помыть в раковине с мылом": -3}),
            ("Нарежь овощи", {"Мелкими кубиками": 2, "Крупными дольками": 0, "Размять руками": -2}),
            ("Добавь масло и специи", {"По одной чайной ложке": 2, "Добавить столовую ложку специй и чайную ложку масла": -2, "Добавить столовую ложку масла и чайную ложку специй": 0}),
            ("Перемешай салат", {"Ложкой": 2, "Вилкой": 1, "Руками": -1}),
            ("Будешь украшать зеленью? Если да, то как?", {"Разложить зелень сверху": 2, "Добавить зелень и перемешать": 0, "Не добавлять": -1})
        ],
        "Суп": [
            ("Нарежь овощи", {"Мелко": 2, "Средне": 1, "Крупно": -1}),
            ("Обжарь лук и морковь", {"Жарить 20-30 мин": 2, "Жарить 40-60 мин ": -2, "Жарить 1-1,5 ч": -1}),
            ("Добавь овощи в кастрюлю", {"Добавить, когда овощи сварятся": 2, "Добавить сразу": -1, "Добавить перед тем, как отключить плиту": -2}),
            ("Залей водой и вари", {"Заполнить водой 2/3 кастрюли": 2, "Заполнить водой 3/4 кастрюли": -2, "Заполнить водой 1/3 кастрюли": -2}),
            ("Добавь специи", {"Добавить по одной столовой ложке соли и перца": 2, "Добавить только ложку перца": -3, "Добавить только ложку соли": -1})
        ]
    }
    
    score = 10
    log = []
    
    for step_num, (step_desc, actions) in enumerate(steps[dish], start=1):
        print(f"\nШаг {step_num}: {step_desc}")
        print("Варианты действий:")
        
        action_list = list(actions.keys())
        for i, action in enumerate(action_list, 1):
            print(f"{i}. {action}")
        
        choice = -1
        while choice not in range(1, len(action_list) + 1):
            try:
                choice = int(input("Выберите действие: ").strip())
            except ValueError:
                pass
        
        chosen_action = action_list[choice - 1]
        score_change = actions[chosen_action]
        score += score_change

        response = random.choice([
            "Надо же, я почти впечатлен.", "Интересно, меня даже не тошнит. Продолжай.", "Возможно, я даже добровольно это попробую, но у тебя еще есть время разочаровать меня.",
            "Можно было бы сделать лучше.", "Еще одно такое движение и я метну в тебя черпаком."
        ])
        print(response)
        log.append(f"Шаг {step_num}: {step_desc} -> {chosen_action} ({response})")
    
    return score, log

def evaluate_dish(score):
    if score >= 15:
        return "На этом все. Молодец, тебе удалось не вызвать у меня желание выстрелить себе в висок. Будешь моим су-шефом."
    elif score >= 10:
        return "На этом все. Получилось хорошо. Хотя, можно было и лучше."
    elif score >= 5:
        return "На этом все. Итог: ничтожная посредственность. А ведь у тебя были все шансы не разочаровать меня."
    else:
        return "На этом все, получилось просто отвратительно. Убирайся из моей кухни."

def save_results(user_name, dish, score, log):
    with open(f"{user_name}_culinary_story.txt", "w", encoding="utf-8") as file:
        file.write(f"История процесса готовки {user_name}\n")
        file.write(f"Блюдо: {dish}\n")
        file.write("\n".join(log) + "\n")
        file.write(f"Итоговая оценка: {score}/20\n")
        file.write(evaluate_dish(score) + "\n")

def main():
    user_name = introduction()
    dish, method = choose_dish()
    score, log = cooking_process(dish, method, user_name)
    result_text = evaluate_dish(score)
    print(f"\n{result_text}")
    save_results(user_name, dish, score, log)
    print("\nРезультаты сохранены в файл.")

if __name__ == "__main__":
    main()
